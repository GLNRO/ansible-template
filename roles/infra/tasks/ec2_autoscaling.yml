#
# This file is part of the ansible-template project and should not be changed
#
---

- name: Determine userdata
  set_fact:
    _launch_config_user_data: |
      #cloud-config
      write_files:
        - path: /etc/ecs/ecs.config
          permissions: 0644
          owner: root
          content: |
            ECS_CLUSTER={{ ecs_cluster_name }}
            AWS_DEFAULT_REGION={{ aws_region }}
      bootcmd:
        - docker pull amazon/amazon-ecs-agent:latest



- name: Determine ECS ami
  set_fact:
    launch_config_ami: "{{launch_config_ami | default(launch_config_amis_per_region[aws_region])}}"

- debug: msg="Using ECS AMI {{ launch_config_ami }}"

- debug: msg="Creating inbound security group opening ports {{ application_security_group_open_ports }}"

- name: Create inboud traffic rules
  set_fact:
    proto: tcp
    from_port: "{{ item.port }}"
    to_port: "{{ item.port }}"
    cidr_ip: "{{ item.from }}"
  with_items: "{{ application_security_group_open_ports }}"
  register: _app_security_group_rules_output

- name: Flatten inboud traffic rules
  set_fact:
    _app_security_group_rules: "{{ _app_security_group_rules_output.results | list | map(attribute='ansible_facts') | list }}"

- debug: msg="Using application security group rules {{ _app_security_group_rules }}"

# Creates a target security group in which the autoscaled machine will running
# If the
- name: Application inbound traffic
  ec2_group:
      name: "{{ application_name  }}-app"
      description: Allows traffic into the application server
      vpc_id: "{{ vpc_id }}"
      rules: "{{ _app_security_group_rules }}"
  register: app_security_group

- name: Set launch config params fact
  set_fact:
    _launch_config_params:
      name: "{{ application_name }}" # this is used for the hash, the actual LC will have a differnet name ( see _launch_config_name )
      image_id: "{{ launch_config_ami }}"
      key_name: "{{ launch_config_key_name }}"
      region: "{{ aws_region }}"
      security_groups: "{{ [ app_security_group['group_id']] }}"
      instance_type: "{{ launch_config_instance_size }}"
      user_data: "{{ _launch_config_user_data }}"
      instance_profile_name: "{{ launch_config_instance_profile_name }}"
      assign_public_ip: "{{ launch_config_assign_public_ip }}"

- name: Set launch config hash fact
  set_fact:
    _launch_config_params_hash: "{{ _launch_config_params | to_json | hash('sha1') }}"

- name: Set launch config name fact
  set_fact:
    _launch_config_name: "{{ application_name }}_{{ _launch_config_params_hash }}"

- name: Launch configuration
  ec2_lc: "{{ _launch_config_params | combine({'name': _launch_config_name }) }}"
  register: app_launch_config

- name: Retrieve current Auto Scaling Group properties
  command: "aws --region {{ aws_region }} autoscaling describe-auto-scaling-groups --auto-scaling-group-names {{ application_name }}"
  register: asg_properties_result

- name: Set asg_properties variable from JSON output if the Auto Scaling Group already exists
  set_fact:
    asg_properties_desired_capacity: "{{ (asg_properties_result.stdout | from_json).AutoScalingGroups[0].DesiredCapacity }}"
  when: (asg_properties_result.stdout | from_json).AutoScalingGroups | count

- name: create autoscaling group
  ec2_asg:
    name: "{{ application_name }}"
    # load_balancers: "{{ app_name }}"
    launch_config_name: "{{ app_launch_config['name'] }}"
    min_size: "{{ asg_min_size }}"
    max_size: "{{ asg_max_size }}"
    desired_capacity: "{{ asg_properties_desired_capacity | default(asg_desired_capacity) }}"
    region: "{{ aws_region }}"
    vpc_zone_identifier: "{{ asg_subnets | join(',') }}"
    health_check_type: EC2
    health_check_period: 300
    tags: "{{ asg_additional_tags }}"
